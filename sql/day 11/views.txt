SELECT * FROM customer_located_in_ahmedabad_35;

select * from payroll_of_dealer_35;

The optional ALGORITHM clause for CREATE VIEW or ALTER VIEW is a MySQL extension to standard SQL. It affects how MySQL processes the view. ALGORITHM takes three values: MERGE, TEMPTABLE, or UNDEFINED


CREATE ALGORITHM = MERGE VIEW v_merge (vc1, vc2) AS
SELECT c1, c2 FROM t WHERE c3 > 100;

If the DEFINER clause is present, the user value should be a MySQL account specified as 'user_name'@'host_name', CURRENT_USER, or CURRENT_USER().




CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);

create function f(@name varchar(200))
return varchar(200)
as 
begin
IF name IS NULL then
  CALL p1();
ELSE
  CALL p2();
END IF;


create function function_to_be_called(@username varchar(200))  
returns varchar(100)  
as  
begin  
declare @password varchar(200)  
set @password=(select [password] from [User] where username =@username)  
return @password  
end


-----------------------------------------------
PROCEDURE 1
-----------------------------------------------
//drop procedure
 DROP PROCEDURE SelectAllCustomersGroupbyCity;

//create procedure
DELIMITER &&
CREATE PROCEDURE SelectAllCustomersGroupbyCity(IN cit nvarchar(30))
begin
select name "Name" ,address "Street_Address" , city "City"
from customer_35
where city = cit;
end &&
DELIMITER;

//call procedure 
call SelectAllCustomersGroupbyCity("surat");

-----------------------------------------------
PROCEDURE 2
-----------------------------------------------
List the VIN, year, and mileage of all "Toyota Camrys" in the inventory of the dealership named "Toyota Performance". (Note that a "Toyota Camry" is indicated by the make being "Toyota" and the model being "Camry".)
----------------------------------------------
DELIMITER &&
create procedure GetCarDetail(in model varchar(200),in dealerships_name varchar(200))
BEGIN
select c.vin ,c.year , c.mileage
from inventory_35 i
left join car_35 c on c.vin = i.vin
left join dealership_35 d on  d.dealershipid = i.dealershipid
where c.model = model and d.name = dealerships_name;
END &&
DELIMITER;

call GetCarDetail("kiger","toyoto Performance");

DROP PROCEDURE GetCarDetail;
-----------------------------------------------
PROCEDURE 3
-----------------------------------------------
DELIMITER &&
create procedure GetSalesPerson(in age_ int(52))
BEGIN
select name "Sales person"
from trainee_35_salesreps
where age > age_ and sales < quota ;
END &&
DELIMITER;

call GetSalesPerson(40);

drop procedure GetSalesPerson;
-----------------------------------------------
PROCEDURE 4
-----------------------------------------------
DELIMITER &&
create procedure orders(in amount_ int)
begin
select distinct o.orderid "Order", ts.name "Sales Person" , tc.company "Customer"
from trainee_35_orders o
inner join trainee_35_salesreps ts on o.salesrepsid = ts.salesrepsid
inner join trainee_35_customer tc on tc.salesrepsid = ts.salesrepsid
where o.amount >= amount_;
end &&
DELIMITER;

call orders(200);
-----------------------------------------------
PROCEDURE 5
-----------------------------------------------
DELIMITER &&
create procedure customerWithSalesman()
BEGIN
select s.name " Sales person", count(c.customerid) "Total Customers"
from trainee_35_customer c
inner join trainee_35_salesreps s on c.salesrepsid = s.salesrepsid 
group by s.salesrepsid;
end &&
DELIMITER;

call customerWithSalesman();
-----------------------------------------------
PROCEDURE 6
-----------------------------------------------

DELIMITER &&
create procedure getNameEndWithBhai()
BEGIN
select concat(surname," ",firstname," ",middlename) "Name" from newstudent_trainee_35 where middlename like '%Bhai' and endeffdt > now(); 
end &&
DELIMITER;

call getNameEndWithBhai();
-----------------------------------------------
PROCEDURE 7
-----------------------------------------------

DELIMITER &&
create procedure getNameSalaryOfProgrammer()
BEGIN
select name "Name", salary "Salary" from officestaff_trainee_35 where designation = "Programmer";
end &&
DELIMITER;

call getNameSalaryOfProgrammer();
-----------------------------------------------
PROCEDURE 8
-----------------------------------------------
Calculate the payroll for the month of March 2007.
------------------------------------------------
DELIMITER &&
create procedure getPayroll()
BEGIN
select s.salespersonid "ID" , s.name "saler name" ,
(basesalaryformonth+(((sum(sa.saleprice-c.invoiceprice))*5)/100)) "Total sales amount"
from salesperson_35 s
inner join sale_35 sa on s.salespersonid = sa.salespersonid
inner join car_35 c on c.vin = sa.vin
inner join worksat_35 w on w.salespersonid = s.salespersonid
where sa.saledate like '2007-03-__'
group by s.name;
end &&
DELIMITER;

call getPayroll();
-----------------------------------------------
PROCEDURE 9
-----------------------------------------------
Find the name and salesperson ID of the salesperson who sold the most cars for the company at dealerships located in Gujarat between March 1, 2007 and March 31, 2007.
-----------------------------------------------
DELIMITER &&
create procedure getNameFromDate(in from_ date)
BEGIN
select s.name "Name",s.salespersonid "salesperson ID"
from salesperson_35 s
inner join sale_35 sa on s.salespersonid = sa.salespersonid
inner join dealership_35 d on sa.dealershipid = d.dealershipid
where d.state = "gujarat" and sa.saledate like from_
group by s.name
having count(sa.salespersonid) = (select max(counts) from (select count(*) "counts" from sale_35 group by salespersonid) as t);
end &&
DELIMITER;

call getNameFromDate('2007-03-__');
-----------------------------------------------
PROCEDURE 10
-----------------------------------------------
Find the names of all salespeople who do not have a manager.
-----------------------------------------------
DELIMITER &&
create procedure getSalesPersonWithNoManager()
BEGIN
select s.name "Name"
from salesperson_35 s
inner join reportsto_35 r on r.salespersonid = s.salespersonid
where s.salespersonid not in (select managingsalespersonid from reportsto_35);
end &&
DELIMITER;

call getSalesPersonWithNoManager();
------------------------------------------------
------------------------------------------------
------------------------------------------------
MySQL Derived Table
------------------------------------------------
A derived table in MySQL is a virtual table that returned from the SELECT…FROM statement.
we use a subquery in the SELECT…FROM clause, it is called a derived table.
We should also consider that a derived table must contain the alias table name that allows us to reference its name later in the statement.
It is also mandatory that each column of the derived table should have unique names.
---------------------------------------------------
MySQL String Functions
Function	        Description
ASCII	            Returns the ASCII value for the specific character
CHAR_LENGTH	      Returns the length of a string (in characters)
CHARACTER_LENGTH	Returns the length of a string (in characters)
CONCAT	          Adds two or more expressions together
CONCAT_WS	        Adds two or more expressions together with a separator
FIELD	            Returns the index position of a value in a list of values
FIND_IN_SET	      Returns the position of a string within a list of strings
FORMAT	          Formats a number to a format like "#,###,###.##", rounded to a specified number of decimal places
INSERT	          Inserts a string within a string at the specified position and for a certain number of characters
INSTR	            Returns the position of the first occurrence of a string in another string
LCASE	            Converts a string to lower-case
LEFT	            Extracts a number of characters from a string (starting from left)
LENGTH	          Returns the length of a string (in bytes)
LOCATE	          Returns the position of the first occurrence of a substring in a string
LOWER	            Converts a string to lower-case

LPAD	            Left-pads a string with another string, to a certain length

The LPAD() function left-pads a string with another string, to a certain length
SELECT LPAD("SQL Tutorial", 20, "ABC");
ABCABCABSQL Tutorial

LTRIM	          Removes leading spaces from a string
MID	            Extracts a substring from a string (starting at any position)
POSITION	      Returns the position of the first occurrence of a substring in a string
REPEAT	        Repeats a string as many times as specified
REPLACE	        Replaces all occurrences of a substring within a string, with a new substring
REVERSE	        Reverses a string and returns the result
RIGHT	          Extracts a number of characters from a string (starting from right)
RPAD	          Right-pads a string with another string, to a certain length
RTRIM	          Removes trailing spaces from a string
SPACE	          Returns a string of the specified number of space characters
STRCMP	        Compares two strings
SUBSTR	        Extracts a substring from a string (starting at any position)
SUBSTRING	      Extracts a substring from a string (starting at any position)
SUBSTRING_INDEX	Returns a substring of a string before a specified number of delimiter occurs
TRIM	          Removes leading and trailing spaces from a string
UCASE	          Converts a string to upper-case
UPPER	          Converts a string to upper-case



------------------------------------------------------
MySQL Date Functions
------------------------------------------------------
Function	        Description
ADDDATE	          Adds a time/date interval to a date and then returns the date
ADDTIME	          Adds a time interval to a time/datetime and then returns the time/datetime
CURDATE	          Returns the current date
CURRENT_DATE	    Returns the current date
CURRENT_TIME	    Returns the current time
CURRENT_TIMESTAMP	Returns the current date and time
CURTIME	          Returns the current time
DATE	            Extracts the date part from a datetime expression
DATEDIFF	        Returns the number of days between two date values
DATE_ADD	        Adds a time/date interval to a date and then returns the date
DATE_FORMAT	      Formats a date
DATE_SUB	        Subtracts a time/date interval from a date and then returns the date
DAY	              Returns the day of the month for a given date
DAYNAME	          Returns the weekday name for a given date
DAYOFMONTH	      Returns the day of the month for a given date
DAYOFWEEK	        Returns the weekday index for a given date
DAYOFYEAR	        Returns the day of the year for a given date
EXTRACT	          Extracts a part from a given date
FROM_DAYS	        Returns a date from a numeric datevalue
HOUR	            Returns the hour part for a given date
LAST_DAY	        Extracts the last day of the month for a given date
LOCALTIME	        Returns the current date and time
LOCALTIMESTAMP	  Returns the current date and time
MAKEDATE	        Creates and returns a date based on a year and a number of days value
MAKETIME	        Creates and returns a time based on an hour, minute, and second value
MICROSECOND	      Returns the microsecond part of a time/datetime
MINUTE	          Returns the minute part of a time/datetime
MONTH	            Returns the month part for a given date
MONTHNAME	        Returns the name of the month for a given date
NOW     	        Returns the current date and time
PERIOD_ADD	      Adds a specified number of months to a period
PERIOD_DIFF	      Returns the difference between two periods
QUARTER	          Returns the quarter of the year for a given date value
SECOND	          Returns the seconds part of a time/datetime
SEC_TO_TIME	      Returns a time value based on the specified seconds
STR_TO_DATE	      Returns a date based on a string and a format
SUBDATE	          Subtracts a time/date interval from a date and then returns the date
SUBTIME	          Subtracts a time interval from a datetime and then returns the time/datetime
SYSDATE	          Returns the current date and time
TIME	            Extracts the time part from a given time/datetime
TIME_FORMAT	      Formats a time by a specified format
TIME_TO_SEC	      Converts a time value into seconds
TIMEDIFF	        Returns the difference between two time/datetime expressions
TIMESTAMP	        Returns a datetime value based on a date or datetime value
TO_DAYS	          Returns the number of days between a date and date "0000-00-00"
WEEK	            Returns the week number for a given date
WEEKDAY	          Returns the weekday number for a given date
WEEKOFYEAR	      Returns the week number for a given date
YEAR	            Returns the year part for a given date
YEARWEEK	        Returns the year and week number for a given date