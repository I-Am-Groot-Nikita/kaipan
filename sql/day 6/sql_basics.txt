keywords
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

The SELECT DISTINCT statement is used to return only distinct (different) values.
//
//
SELECT COUNT(DISTINCT Country) FROM Customers;
//
SELECT Count(*) AS DistinctCountries
FROM (SELECT DISTINCT Country FROM Customers);
//
//
SELECT * FROM Customers
WHERE Country='Mexico';
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be 	written as !=	
BETWEEN	Between a certain range	
LIKE 	Search for a pattern	
IN	To specify multiple possible values for a column	
//
AND The AND operator displays a record if all the conditions separated by AND are TRUE.
OR The OR operator displays a record if any of the conditions separated by OR is TRUE.
NOT The NOT operator displays a record if the condition(s) is NOT TRUE
//
ORDER BY keyword is used to sort the result-set in ascending or descending order.To sort the records in descending order, use the DESC keyword.default it is in accending order.
//
IS NULL Syntax
SELECT column_names FROM table_name WHERE column_name IS NULL;
IS NOT NULL Syntax
SELECT column_names FROM table_name WHERE column_name IS NOT NULL;
//
Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.
//
The MIN() function returns the smallest value of the selected column.
The MAX() function returns the largest value of the selected column.
//
SQL COUNT(), AVG() and SUM() Functions
//
LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
//
//
wildcard in ms access
*	Represents zero or more characters	                                bl* finds bl, black, blue, and blob
?	Represents a single character	                                    h?t finds hot, hat, and hit
[]	Represents any single character within the brackets	                h[oa]t finds hot and hat, but not hit
!	Represents any character not in the brackets	                    h[!oa]t finds hit, but not hot and hat
-	Represents any single character within the specified range	        c[a-b]t finds cat and cbt
#	Represents any single numeric character	                            2#5 finds 205, 215, 225, 235, 245, 255, 265, 275, 285, and 295

wildcard in sql
%	Represents zero or more characters	                                bl% finds bl, black, blue, and blob
_	Represents a single character	                                    h_t finds hot, hat, and hit
[]	Represents any single character within the brackets	                h[oa]t finds hot and hat, but not hit
^	Represents any character not in the brackets	                    h[^oa]t finds hit, but not hot and hat
-	Represents any single character within the specified range	        c[a-b]t finds cat and cbt

//
// IN
The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.
//
//BETWEEN
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
The BETWEEN operator is inclusive: begin and end values are included. 
//
//alias
SQL Aliases
SQL aliases are used to give a table, or a column in a table, a temporary name.
Aliases are often used to make column names more readable.
An alias only exists for the duration of that query.
An alias is created with the AS keyword.
//
//joins
(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table
//A self join is a regular join, but the table is joined with itself.
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;
//
The UNION operator is used to combine the result-set of two or more SELECT statements.
Every SELECT statement within UNION must have the same number of columns
The columns must also have similar data types
The columns in every SELECT statement must also be in the same order

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;
//
//HAVING
HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

//
//exists
 EXISTS operator is used to test for the existence of any record in a subquery.
The EXISTS operator returns TRUE if the subquery returns one or more records.

SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);

//
//any
The ANY operator:

returns a boolean value as a result
returns TRUE if ANY of the subquery values meet the condition
ANY means that the condition will be true if the operation is true for any of the values in the range.

SELECT ALL column_name(s)
FROM table_name
WHERE condition;

//
//all

The ALL operator:

returns a boolean value as a result
returns TRUE if ALL of the subquery values meet the condition
is used with SELECT, WHERE and HAVING statements
ALL means that the condition will be true only if the operation is true for all values in the range. 

SELECT column_name(s)
FROM table_name
WHERE column_name operator ALL
  (SELECT column_name
  FROM table_name
  WHERE condition);

//
//SELECT INTO
SELECT INTO statement copies data from one table into a new table.
//INSERT INTO SELECT
The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
The INSERT INTO SELECT statement requires that the data types in source and target tables match.

//
//CASE

CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;

//
//IFNULL(), ISNULL(), COALESCE(), and NVL() Functions






//DESCRIBE table_name
//DESC table_name

//create tableCREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);

//create table using another table
CREATE TABLE new_table_name AS
    SELECT column1, column2,...
    FROM existing_table_name
    WHERE ....;

//DROP TABLE table_name;

//alter table
ALTER TABLE statement is used to add, delete, or modify columns in an existing table.


//trancate
//The TRUNCATE TABLE command deletes the data inside a table, but not the table itself.